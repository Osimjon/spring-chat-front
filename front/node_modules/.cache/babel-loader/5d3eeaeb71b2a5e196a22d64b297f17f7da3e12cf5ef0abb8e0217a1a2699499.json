{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0420\\u0430\\u0431\\u043E\\u0442\\u044B Java\\\\Spring-chat-front\\\\front\\\\src\\\\MessageList.tsx\",\n  _s2 = $RefreshSig$();\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { List, ListItem, Typography, Paper, Avatar, makeStyles } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MessageList() {\n  _s2();\n  var _s = $RefreshSig$();\n  const fetchMessages = async () => {\n    const res = await fetch(\"http://localhost:8080/chat/messages\");\n    return res.json();\n  };\n  const {\n    data: messages,\n    isLoading\n  } = useQuery({\n    queryFn: async () => {\n      return fetchMessages();\n    },\n    queryKey: [\"data\"]\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n  const useStyles = makeStyles(theme => {\n    return {\n      messageContainer: {\n        display: 'flex',\n        alignItems: 'center',\n        marginBottom: theme.spacing(1)\n      },\n      avatar: {\n        marginRight: theme.spacing(2)\n      }\n    };\n  });\n  const ChatMessages = ({\n    messages\n  }) => {\n    _s();\n    const classes = useStyles();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: messages === null || messages === void 0 ? void 0 : messages.map(message => /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            className: classes.messageContainer,\n            children: [message.user.avatar && /*#__PURE__*/_jsxDEV(Avatar, {\n              src: message.user.avatar,\n              alt: message.user.userName,\n              className: classes.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                children: message.user.userName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                children: message.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n\n    // <div>\n    //     <ul>\n    //         {messages?.map((message: messageType) => (\n    //             <li key={message.id}>\n    //                 <div>\n    //                     <h5>{message.userName}</h5>\n    //                     <p>{message.message}</p>\n    //                 </div>\n    //             </li>\n    //         ))}\n    //     </ul>\n    // </div>\n    ;\n  };\n  _s(ChatMessages, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n    return [useStyles];\n  });\n}\n_s2(MessageList, \"OYuFB7+YlpP9SDs+Ybqqra/UO0g=\", false, function () {\n  return [useQuery];\n});\n_c = MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["React","useQuery","List","ListItem","Typography","Paper","Avatar","makeStyles","jsxDEV","_jsxDEV","MessageList","_s2","_s","$RefreshSig$","fetchMessages","res","fetch","json","data","messages","isLoading","queryFn","queryKey","children","fileName","_jsxFileName","lineNumber","columnNumber","useStyles","theme","messageContainer","display","alignItems","marginBottom","spacing","avatar","marginRight","ChatMessages","classes","map","message","elevation","className","user","src","alt","userName","variant","id","_c","$RefreshReg$"],"sources":["D:/Работы Java/Spring-chat-front/front/src/MessageList.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {useQuery} from \"react-query\";\r\nimport {List, ListItem, ListItemText, Typography, Paper, Avatar, makeStyles} from '@mui/material';\r\n\r\ntype messageType = {\r\n    id: string,\r\n    message: string,\r\n    userName: string\r\n    messageTime: string\r\n}\r\n\r\nexport function MessageList() {\r\n    const fetchMessages = async () => {\r\n        const res = await fetch(\"http://localhost:8080/chat/messages\");\r\n        return res.json();\r\n    }\r\n\r\n    const {data: messages, isLoading} = useQuery({\r\n        queryFn: async () => {\r\n            return fetchMessages();\r\n\r\n        },\r\n        queryKey: [\"data\"]\r\n    })\r\n    if (isLoading) return (\r\n        <div>Loading...</div>\r\n    )\r\n\r\n    const useStyles = makeStyles((theme) => {\r\n        return ({\r\n            messageContainer: {\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                marginBottom: theme.spacing(1),\r\n            },\r\n            avatar: {\r\n                marginRight: theme.spacing(2),\r\n            },\r\n        });\r\n    });\r\n\r\n    const ChatMessages = ({messages}) => {\r\n        const classes = useStyles();\r\n\r\n        return (\r\n            <div>\r\n                <List>\r\n                    {messages?.map((message) => (\r\n                        <ListItem key={message.id}>\r\n                            <Paper elevation={3} className={classes.messageContainer}>\r\n                                {/* Avatar (если у вас есть URL аватара пользователя) */}\r\n                                {message.user.avatar && (\r\n                                    <Avatar src={message.user.avatar} alt={message.user.userName}\r\n                                            className={classes.avatar}/>\r\n                                )}\r\n\r\n                                {/* Имя пользователя и текст сообщения */}\r\n                                <div>\r\n                                    <Typography variant=\"subtitle1\">{message.user.userName}</Typography>\r\n                                    <Typography variant=\"body1\">{message.message}</Typography>\r\n                                </div>\r\n                            </Paper>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </div>\r\n\r\n\r\n            // <div>\r\n            //     <ul>\r\n            //         {messages?.map((message: messageType) => (\r\n            //             <li key={message.id}>\r\n            //                 <div>\r\n            //                     <h5>{message.userName}</h5>\r\n            //                     <p>{message.message}</p>\r\n            //                 </div>\r\n            //             </li>\r\n            //         ))}\r\n            //     </ul>\r\n            // </div>\r\n        )\r\n\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}