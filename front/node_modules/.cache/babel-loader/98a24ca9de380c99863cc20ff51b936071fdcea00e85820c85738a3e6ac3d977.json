{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0420\\u0430\\u0431\\u043E\\u0442\\u044B Java\\\\Spring-chat-front\\\\front\\\\src\\\\MessageList.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { List, ListItem, Paper } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MessageList() {\n  _s();\n  const fetchMessages = async () => {\n    const res = await fetch(\"http://localhost:8080/chat/messages\");\n    return res.json();\n  };\n  const {\n    data: messages,\n    isLoading\n  } = useQuery({\n    queryFn: async () => {\n      return fetchMessages();\n    },\n    queryKey: [\"data\"]\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: messages === null || messages === void 0 ? void 0 : messages.map(message => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          children: [message.userName, message.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this)\n\n  // <div>\n  //     <ul>\n  //         {messages?.map((message: messageType) => (\n  //             <li key={message.id}>\n  //                 <div>\n  //                     <h5>{message.userName}</h5>\n  //                     <p>{message.message}</p>\n  //                 </div>\n  //             </li>\n  //         ))}\n  //     </ul>\n  // </div>\n  ;\n}\n_s(MessageList, \"OYuFB7+YlpP9SDs+Ybqqra/UO0g=\", false, function () {\n  return [useQuery];\n});\n_c = MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["React","useQuery","List","ListItem","Paper","jsxDEV","_jsxDEV","MessageList","_s","fetchMessages","res","fetch","json","data","messages","isLoading","queryFn","queryKey","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","elevation","userName","id","_c","$RefreshReg$"],"sources":["D:/Работы Java/Spring-chat-front/front/src/MessageList.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {useQuery} from \"react-query\";\r\nimport {List, ListItem, Paper} from \"@mui/material\";\r\n\r\ntype messageType = {\r\n    id: string,\r\n    message: string,\r\n    userName: string\r\n    messageTime: string\r\n}\r\n\r\nexport function MessageList() {\r\n    const fetchMessages = async () =>{\r\n        const res = await fetch(\"http://localhost:8080/chat/messages\");\r\n        return res.json();\r\n    }\r\n\r\n    const {data: messages, isLoading} = useQuery({\r\n        queryFn: async () => {\r\n            return fetchMessages();\r\n\r\n        },\r\n        queryKey: [\"data\"]\r\n    })\r\n    if (isLoading) return (\r\n        <div>Loading...</div>\r\n    )\r\n\r\n    return (\r\n\r\n\r\n        <div>\r\n            <List>\r\n                {messages?.map((message:messageType) => (\r\n                    <ListItem key={message.id}>\r\n                        <Paper elevation={3} >\r\n                            {message.userName}\r\n                            {message.message}\r\n                        </Paper>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </div>\r\n\r\n\r\n    // <div>\r\n    //     <ul>\r\n    //         {messages?.map((message: messageType) => (\r\n    //             <li key={message.id}>\r\n    //                 <div>\r\n    //                     <h5>{message.userName}</h5>\r\n    //                     <p>{message.message}</p>\r\n    //                 </div>\r\n    //             </li>\r\n    //         ))}\r\n    //     </ul>\r\n    // </div>\r\n)\r\n\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,aAAa;AACpC,SAAQC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,QAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASpD,OAAO,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAW;IAC7B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;IAC9D,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EACrB,CAAC;EAED,MAAM;IAACC,IAAI,EAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGd,QAAQ,CAAC;IACzCe,OAAO,EAAE,MAAAA,CAAA,KAAY;MACjB,OAAOP,aAAa,CAAC,CAAC;IAE1B,CAAC;IACDQ,QAAQ,EAAE,CAAC,MAAM;EACrB,CAAC,CAAC;EACF,IAAIF,SAAS,EAAE,oBACXT,OAAA;IAAAY,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAGzB,oBAGIhB,OAAA;IAAAY,QAAA,eACIZ,OAAA,CAACJ,IAAI;MAAAgB,QAAA,EACAJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAES,GAAG,CAAEC,OAAmB,iBAC/BlB,OAAA,CAACH,QAAQ;QAAAe,QAAA,eACLZ,OAAA,CAACF,KAAK;UAACqB,SAAS,EAAE,CAAE;UAAAP,QAAA,GACfM,OAAO,CAACE,QAAQ,EAChBF,OAAO,CAACA,OAAO;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC,GAJGE,OAAO,CAACG,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKf,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN;;EAGT;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAGJ;AAACd,EAAA,CAhDeD,WAAW;EAAA,QAMaN,QAAQ;AAAA;AAAA2B,EAAA,GANhCrB,WAAW;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}