{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0420\\u0430\\u0431\\u043E\\u0442\\u044B Java\\\\Spring-chat-front\\\\front\\\\src\\\\TextBar.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Container, Input, useTheme } from \"@mui/material\";\nimport SendIcon from '@mui/icons-material/Send';\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TextBar() {\n  _s();\n  const theme = useTheme();\n  const [message, setMessage] = useState(\"\");\n  const [userName, setUserName] = useState(\"Admin\");\n  const queryClient = useQueryClient();\n  const sendMessageMutation = useMutation(async data => {\n    try {\n      let response = await fetch(\"http://localhost:8080/chat/messages\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n\n      // Проверка на успешный статус ответа\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      throw error;\n    }\n  }, {\n    onSuccess: async () => {\n      console.log(\"Успешный успех!\");\n\n      // Обновите кэш для запроса \"messages\"\n      await Promise.resolve(queryClient.invalidateQueries(\"messages\"));\n    }\n  });\n  const handleSendMessage = () => {\n    sendMessageMutation.mutate({\n      message,\n      userName\n    });\n    setMessage(\"\");\n  };\n  const handleInput = e => {\n    return setMessage(e.currentTarget.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xl\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        style: {\n          width: \"50%\",\n          height: \"40px\"\n        },\n        onChange: handleInput,\n        value: message,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleSendMessage,\n        children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 12\n  }, this);\n}\n_s(TextBar, \"cuA6p/rfs3+Glj7IExD7qwYYNF4=\", false, function () {\n  return [useTheme, useQueryClient, useMutation];\n});\n_c = TextBar;\nvar _c;\n$RefreshReg$(_c, \"TextBar\");","map":{"version":3,"names":["React","useState","Button","Container","Input","useTheme","SendIcon","useMutation","useQueryClient","jsxDEV","_jsxDEV","TextBar","_s","theme","message","setMessage","userName","setUserName","queryClient","sendMessageMutation","data","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","onSuccess","log","Promise","resolve","invalidateQueries","handleSendMessage","mutate","handleInput","e","currentTarget","value","children","maxWidth","style","width","height","onChange","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","_c","$RefreshReg$"],"sources":["D:/Работы Java/Spring-chat-front/front/src/TextBar.tsx"],"sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {Button, Container, Input, useTheme} from \"@mui/material\";\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport {useMutation, useQueryClient} from \"react-query\";\r\n\r\nexport function TextBar() {\r\n\r\n    const theme = useTheme();\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const [userName, setUserName] = useState(\"Admin\");\r\n    const queryClient = useQueryClient();\r\n\r\n    const sendMessageMutation = useMutation(\r\n        async (data: { message: string; userName: string }) => {\r\n            try {\r\n                let response = await fetch(\"http://localhost:8080/chat/messages\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(data),\r\n                });\r\n\r\n                // Проверка на успешный статус ответа\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n\r\n                return await response.json();\r\n            } catch (error) {\r\n                console.error(\"Error sending message:\", error);\r\n                throw error;\r\n            }\r\n        },\r\n        {\r\n            onSuccess: async () => {\r\n                console.log(\"Успешный успех!\");\r\n\r\n                // Обновите кэш для запроса \"messages\"\r\n                await Promise.resolve(queryClient.invalidateQueries(\"messages\"));\r\n            },\r\n        }\r\n    );\r\n\r\n\r\n    const handleSendMessage = () => {\r\n        sendMessageMutation.mutate({message, userName,});\r\n        setMessage(\"\");\r\n    };\r\n\r\n    const handleInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        return setMessage(e.currentTarget.value);\r\n    }\r\n\r\n    return <div>\r\n        <Container maxWidth=\"xl\">\r\n            <Input style={{width: \"50%\", height: \"40px\"}} onChange={handleInput} value={message}  autoFocus />\r\n            <Button variant=\"contained\" onClick={handleSendMessage}>\r\n                <SendIcon/>\r\n            </Button>\r\n        </Container>\r\n    </div>\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}